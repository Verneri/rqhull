#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
/* automatically generated by rust-bindgen */

mod iterators;

#[cfg(test)]
#[macro_use]
extern crate ndarray;
#[cfg(not(test))]
extern crate ndarray;

extern crate itertools;
extern crate libc;



use ndarray::{Array1, Array2};
mod qhull;


pub struct Voronoi<'p>{
    pub points : &'p Array2<f64>,
    pub vertices: Vec<[f64;2]>,
    pub ridge_points:Vec<[i32;2]>,
    pub ridge_vertices: Vec<Vec<i32>>,
    pub regions: Vec<Vec<i32>>,
    pub point_region: Array1<i32>
}



use qhull::{QhullOption,QhullError,QHull,QhullMode};

impl<'a> Voronoi<'a> {




    pub fn new<'p>( points: &'p mut Array2<f64>) -> Result<Voronoi<'p>,QhullError> {



        let mut options = vec![QhullOption::ScaleLast, QhullOption::KeepCoplanar, QhullOption::AddAPointAtInfinity];

        if points.shape()[1] >= 5 {
            options.push(QhullOption::ExactPreMerges);
        }


        let (vertices,
            ridge_points,
            ridge_vertices,
            regions,
            point_region) = {
            let qh = QHull::new(QhullMode::Voronoi, points, options)?;
            qh.get_voronoi_diagram()
        };

        Ok(
           Voronoi {
               points: points,
               vertices: vertices,
               ridge_points: ridge_points,
               ridge_vertices: ridge_vertices,
               regions: regions,
               point_region: point_region
           }
        )

    }


}


#[cfg(test)]
mod tests;
